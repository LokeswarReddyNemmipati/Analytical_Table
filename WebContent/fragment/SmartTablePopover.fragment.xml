<core:FragmentDefinition
	xmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"
	xmlns="sap.m" xmlns:build="sap.build" xmlns:core="sap.ui.core"
	xmlns:smartlink="sap.ui.comp.navpopover"
	xmlns:smartFilterBar="sap.ui.comp.smartfilterbar"
	xmlns:st="sap.ui.comp.smarttable" xmlns:table="sap.ui.table"
	xmlns:app="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
	xmlns:smartList="sap.ui.comp.smartlist"
	template:require="zvui.work.controller.Helper zvui.work.controller.AnnotationHelper"
	xmlns:layout="sap.ui.layout">

	<template:alias name=".AH"
		value="sap.ui.model.odata.AnnotationHelper">
		<template:alias name=".formatParts"
			value="zvui.work.controller.Helper.formatParts">
			<template:alias name=".id"
				value="zvui.work.controller.Helper.id">

				<template:with path="facet>Target" var="target">
					<template:with path="target>"
						helper="sap.ui.model.odata.AnnotationHelper.gotoEntitySet"
						var="listEntitySet">
						<template:with path="listEntitySet>entityType"
							helper="sap.ui.model.odata.AnnotationHelper.gotoEntityType"
							var="listEntityType">
							<template:with path="target>"
								helper="sap.ui.model.odata.AnnotationHelper.resolvePath"
								var="collection">
								<template:with path="listEntityType>"
									helper="zvui.work.controller.AnnotationHelper.searchForFirstSemKey_Title_Description"
									var="targetColumn">
									<template:with
										path="listEntityType>com.sap.vocabularies.UI.v1.HeaderInfo"
										var="header">

										<st:SmartTable
											tableBindingPath="{parts: [{path: 'entitySet>'} , {path: 'listEntitySet>'}, {path: 'listEntityType>'}, {path: 'facets>'}, {path: 'facet>'}, {path: 'header>'}, {path: 'target>AnnotationPath'}], formatter: 'zvui.work.controller.AnnotationHelper.setTableBindingPath'}"
											fitContainer="false" useOnlyOneSolidToolbar="true"
											beforeRebindTable="onTableRebind" enableAutoBinding="true"
											showRowCount="false" initialise="onTableInitialise"
											requestAtLeastFields="{path: 'listEntityType>', formatter: 'zvui.work.controller.AnnotationHelper.getRequestAtLeastFields'}"
											useVariantManagement="true" useExportToExcel="false"
											useTablePersonalisation="true" header="{path: 'facet>Label', formatter: 'sap.ui.model.odata.AnnotationHelper.format'}"
											showTablePersonalisation="{parts:[{path: 'listEntitySet>'},{path: 'listEntityType>'}], formatter:'zvui.work.controller.AnnotationHelper.showTablePersonalisation'}"													
											entitySet="{path: 'listEntitySet>name'}"
											ignoreFromPersonalisation="{parts: [{path: 'collection>'}], formatter: 'zvui.work.controller.AnnotationHelper.suppressP13NDuplicateColumns'}"
											demandPopin="{ parts:[{path: 'columnModel>/entities'},{path: 'listEntityType>'}], formatter: 'zvui.work.controller.AnnotationHelper.isEntityResponsiveTable'}"
											enableCustomFilter="false" noData="{i18n>NODATA}"
											build:metadata="#pattern:Table;bindingContext:columns:Items:\{path: 'target>', formatter: 'sap.ui.model.odata.AnnotationHelper.getNavigationPath'\};"
											visible="{= ${path: 'facet>com.sap.vocabularies.UI.v1.Hidden'} ? ${path: 'facet>', formatter: 'zvui.work.controller.AnnotationHelper.getBindingForHiddenPath'} : true}"
											editable="false"
											placeToolbarInTable="true" 
											app:p13nDialogSettings="{filter:{visible:false}}"
											smartFilterId="{parts: [{path: 'listEntityType>'}, {path: 'facet>'}], formatter: 'zvui.work.controller.AnnotationHelper.setQuickFilterId'}">

											<st:customData>
												<core:CustomData key="useSmartToggle"
													value="true" />
												<core:CustomData key="useSmartField"
													value="true" />
												<core:CustomData key="dateFormatSettings"
													value='\{"UTC":true,"style":"medium"\}' />
												<template:if
													test="{= ${facet>Target/AnnotationPath}.split('#')[1]}">
													<core:CustomData key="lineItemQualifier"
														value="{= ${facet>Target/AnnotationPath}.split('#')[1]}" />
												</template:if>
												<template:with
													path="listEntityType>com.sap.vocabularies.UI.v1.PresentationVariant"
													var="variant">
													<template:if test="{= ${variant>SortOrder}}">
														<core:CustomData key="TemplateSortOrder"
															value="{path: 'variant>SortOrder', formatter: 'zvui.work.controller.AnnotationHelper.getSortOrder'}" />
													</template:if>
												</template:with>
											</st:customData>

											<st:semanticObjectController>
												<smartlink:SemanticObjectController
													beforePopoverOpens="._templateEventHandlers.onBeforeSemanticObjectLinkPopoverOpens"
													navigate="._templateEventHandlers.onSemanticObjectLinkPopoverLinkPressed"
													navigationTargetsObtained="._templateEventHandlers.onSemanticObjectLinkNavigationTargetObtained"
													forceLinkRendering="{parts: [{path: 'listEntitySet>'}], formatter: 'zvui.work.controller.AnnotationHelper.hasQuickViewFacet'}" />
											</st:semanticObjectController>
											<st:layoutData>
												<layout:GridData
													id="{path: 'facet>', formatter: 'zvui.work.controller.AnnotationHelper.getStableIdPartFromFacet'}::Table::GridData"
													span="XL12 L12 M12 S12" />
													<FlexItemData growFactor="1" baseSize="0%" />
											</st:layoutData>

<!-- 											<template:if
												test="{ parts:[{path: 'columnModel>/entities'},{path: 'listEntityType>'}], formatter: 'zvui.work.controller.AnnotationHelper.isEntityResponsiveTable'}">
												<template:then> -->
													<Table
														id="{path: 'facet>', formatter: 'zvui.work.controller.AnnotationHelper.getStableIdPartFromFacet'}::responsiveTable"
														fixedLayout="false" growing="true"
														growingScrollToLoad="true" growingThreshold="100"
														mode="None"
														sticky="ColumnHeaders,HeaderToolbar">
														<!-- "MultiSelect" -->
														<core:Fragment
															fragmentName="zvui.work.fragment.TableColumns"
															type="XML" />
														<core:Fragment
															fragmentName="zvui.work.fragment.TableColumnListItem"
															type="XML" />
													</Table>
												<!-- </template:then>
												<template:else>
													<table:Table
														id="{path: 'facet>', formatter: 'zvui.work.controller.AnnotationHelper.getStableIdPartFromFacet'}::gridTable"
														enableColumnReordering="true"
														showColumnVisibilityMenu="false"
														visibleRowCountMode="Interactive"
														selectionMode="{parts: [{path: 'listEntityType>'}], formatter: 'zvui.work.controller.AnnotationHelper.getUITableSelectionMode'}"
														rowSelectionChange="onSelectionChange"
														visibleRowCount="10" 
														enableBusyIndicator="true" enableColumnFreeze="true"
														enableCellFilter="true"
														rowActionCount="{parts: [{path: 'listEntitySet>'},{path: 'listEntityType>'},{path: 'columnModel>/showDetailButton'}], formatter: 'zvui.work.controller.AnnotationHelper.getSmartTableRowActionCount'}">

														<table:rowSettingsTemplate>
															<table:RowSettings
																highlight="{parts: [{path: 'listEntityType>'}], formatter: 'zvui.work.controller.AnnotationHelper.setRowHighlight'}" />
														</table:rowSettingsTemplate>
														<table:columns>
															<core:Fragment
																fragmentName="zvui.work.fragment.GridTableColumns"
																type="XML" />
														</table:columns>
														<table:rowActionTemplate>
															<core:Fragment
																fragmentName="zvui.work.fragment.RowActions"
																type="XML" />
														</table:rowActionTemplate>
													</table:Table>

												</template:else>
											</template:if> -->

										</st:SmartTable>
									</template:with>
								</template:with>
							</template:with>
						</template:with>
					</template:with>
				</template:with>
			</template:alias>
		</template:alias>
	</template:alias>
</core:FragmentDefinition>